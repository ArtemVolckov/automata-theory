/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : SmcRecognizer.sm
 */

#ifndef _SMCRECOGNIZER_SM_H
#define _SMCRECOGNIZER_SM_H

#include <assert.h>
#include "statemap.h"


struct SmcRecognizer;
struct SmcRecognizerContext;

struct SmcRecognizerState {
    void(*EOS)(struct SmcRecognizerContext *const fsm);
    void(*letter)(struct SmcRecognizerContext *const fsm, char LET);
    void(*reset)(struct SmcRecognizerContext *const fsm);
    void(*Default)(struct SmcRecognizerContext *const fsm);
    STATE_MEMBERS
};

extern const struct SmcRecognizerState MainMap_Error;
extern const struct SmcRecognizerState MainMap_Start;
extern const struct SmcRecognizerState MainMap_Command;
extern const struct SmcRecognizerState MainMap_Blank;
extern const struct SmcRecognizerState MainMap_First_hyphen;
extern const struct SmcRecognizerState MainMap_Second_hyphen;
extern const struct SmcRecognizerState MainMap_Single_character_key;
extern const struct SmcRecognizerState MainMap_Mylti_character_key_first_symbol;
extern const struct SmcRecognizerState MainMap_Mylti_character_key_not_first_symbol;

struct SmcRecognizerContext {
    struct SmcRecognizer *_owner;
    FSM_MEMBERS(SmcRecognizer)
};

#ifdef NO_SMCRECOGNIZER_SM_MACRO
extern void SmcRecognizerContext_Init(struct SmcRecognizerContext *const fsm, struct SmcRecognizer *const owner);
extern void SmcRecognizerContext_EOS(struct SmcRecognizerContext *const fsm);
extern void SmcRecognizerContext_letter(struct SmcRecognizerContext *const fsm, char LET);
extern void SmcRecognizerContext_reset(struct SmcRecognizerContext *const fsm);
#else
#define SmcRecognizerContext_Init(fsm, owner) \
    FSM_INIT((fsm), &MainMap_Start); \
    (fsm)->_owner = (owner)

#define SmcRecognizerContext_EOS(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "EOS"); \
    getState(fsm)->EOS((fsm)); \
    setTransition((fsm), NULL)

#define SmcRecognizerContext_letter(fsm, LET) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "letter"); \
    getState(fsm)->letter((fsm), (LET)); \
    setTransition((fsm), NULL)

#define SmcRecognizerContext_reset(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "reset"); \
    getState(fsm)->reset((fsm)); \
    setTransition((fsm), NULL)
#endif

#endif

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
